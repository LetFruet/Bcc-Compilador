package Sintatico;

public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 71;

    int[][] PARSER_TABLE =
    {
        { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1,  2,  3, -1, -1, -1, -1,  3,  3,  3,  3, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  5, -1, -1, -1, -1,  5,  5,  5,  5, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6,  7, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10,  9,  9, -1, -1 },
        { -1, -1, -1, -1, 14, -1, -1, -1, -1, 12, 13, 13, 15, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 18, -1, -1, -1, -1, 16, 17, 17, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 23 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, 29, -1, -1, 29, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, -1, 29, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 30 },
        { -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 33, -1, 34, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 35, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 37, -1, -1, -1, -1, 37, 37, 37, 37, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 38, 39, 38, 38, -1, -1, 39, 39, 39, 39, 38, 38, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, -1, 43, 43, 43, 43, -1, -1, 43, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, 43, -1 },
        { -1, -1, -1, -1, 44, -1, -1, -1, -1, 44, 44, 44, 44, -1, -1, 44, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, 44 },
        { -1, -1, -1, -1, -1, -1, -1, 49, 48, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, -1, -1, 50, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, 47, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, 51, -1 },
        { -1, -1, -1, -1, 52, -1, -1, -1, -1, 52, 52, 52, 52, -1, -1, 52, -1, -1, -1, 52, 52, -1, 53, 53, 53, 53, -1, -1, -1, -1, 52, 52, -1, -1, 52 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 55, 56, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, 58, 58, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, -1, -1, -1, 58, -1 },
        { -1, -1, -1, -1, 59, -1, -1, -1, -1, 59, 59, 59, 59, -1, -1, 59, -1, -1, -1, 59, 59, -1, 59, 59, 59, 59, 60, 61, -1, -1, 59, 59, -1, -1, 59 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, -1, -1, 62, -1 },
        { -1, -1, -1, -1, 63, -1, -1, -1, -1, 63, 63, 63, 63, -1, -1, 63, -1, -1, -1, 63, 63, -1, 63, 63, 63, 63, 63, 63, 64, 65, 63, 63, -1, -1, 63 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 67, 68, 69, -1, -1, -1, -1, -1, -1, -1, 71, 72, -1, -1, -1, -1, -1, 70, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 171,   3,  37,   4, 172 },
        {  39,  32,  38 },
        {   0 },
        {  37 },
        {  41,  40 },
        {  44 },
        { 173 },
        {  33,  60, 174 },
        {  16, 175,  42 },
        {   0 },
        {  31,  41 },
        {  45 },
        {  46 },
        {  50 },
        {  53 },
        {  58 },
        {  46 },
        {  50 },
        {  53 },
        {  58 },
        {  41,  33,  60, 174 },
        {  10,  34,  47,  35 },
        {  49,  16, 176,  48 },
        {   0 },
        {  31,  47 },
        {   0 },
        {  19, 177,  31 },
        {  11,  34,  51,  35 },
        {  12,  34,  51,  35, 178 },
        {  60, 179,  52 },
        {   0 },
        {  31,  51 },
        {   5,  60, 180,  56,  54, 181,  55, 182,   4 },
        {   0 },
        { 181,   6,  60, 183,  56,  54 },
        {   0 },
        {   7,  56 },
        {  43,  32,  57 },
        {   0 },
        {  56 },
        { 184,  13,  56,  59 },
        {  15,  60, 185 },
        {  14,  60, 186 },
        {  62,  61 },
        {   0 },
        {  20,  62, 187,  61 },
        {  21,  62, 188,  61 },
        {  63 },
        {   9, 189 },
        {   8, 190 },
        {  22,  62, 191 },
        {  66,  64 },
        {   0 },
        {  65, 192,  66, 193 },
        {  23 },
        {  24 },
        {  25 },
        {  26 },
        {  68,  67 },
        {   0 },
        {  27,  68, 194,  67 },
        {  28,  68, 195,  67 },
        {  70,  69 },
        {   0 },
        {  29,  70, 196,  69 },
        {  30,  70, 197,  69 },
        {  16, 198 },
        {  17, 199 },
        {  18, 200 },
        {  19, 201 },
        {  34,  60,  35 },
        {  27,  70 },
        {  28,  70, 202 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF",
        "esperado palavra reservada",
        "esperado main",
        "esperado end",
        "esperado if",
        "esperado elif",
        "esperado else",
        "esperado false",
        "esperado true",
        "esperado read",
        "esperado write",
        "esperado writeln",
        "esperado repeat",
        "esperado until",
        "esperado while",
        "esperado identificador",
        "esperado constante_int",
        "esperado constante_float",
        "esperado constante_string",
        "esperado &&",
        "esperado ||",
        "esperado !",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado /",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado (",
        "esperado )",
        "esperado main", // "<forma_geral> inválido",
        "esperado if  read  write  writeln  repeat  identificador", // "<lista_instrucoes> inválido",
        "esperado end  if  read  write  writeln  repeat  identificador", // "<lista_instrucoes1> inválido",
        "esperado if  read  write  writeln  repeat  identificador", // "<instrucao> inválido",
        "esperado ;  =", // "<instrucao1> inválido",
        "esperado identificador", //"<lista_identificadores> inválido",
        "esperado ,  ;  =", // "<lista_identificadores1> inválido",
        "esperado if  read  write  writeln  repeat  identificador", //"<comando> inválido",
        "esperado if  read  write  writeln  repeat", //"<comando1> inválido",
        "esperado identificador", //"<cmd_atribuicao> inválido",
        "esperado read", //"<cmd_read> inválido",
        "esperado identificador  string", //"<lista_entrada> inválido",
        "esperado ,  )", //"<lista_entrada1> inválido",
        "esperado identificador  string", //"<constante_string> inválido",
        "esperado write  writeln", //"<cmd_saida> inválido",
        "esperado expressao", // "<lista_expressoes> inválido",
        "esperado ,  )", //"<lista_expressoes1> inválido", 
        "esperado if", //"<cmd_select> inválido",
        "esperado end  elif  else", //"<cmd_elif> inválido",
        "esperado end  else", //"<cmd_else> inválido",
        "esperado if  read  write  writeln  repeat  identificador", //"<lista_comandos> inválido",
        "esperado end  if  elif  else  read  write  writeln  repeat  until  while  identificador", //"<lista_comandos1> inválido",
        "esperado repeat", //"<cmd_repeat> inválido",
        "esperado until  while", //"<cmd_repeat1> inválido",
        "esperado expressao", // "<expressao> inválido",
        "esperado expressao", // "<expressao1> inválido",
        "esperado expressao", // "<elemento> inválido",
        "esperado expressao", // "<relacional> inválido",
        "esperado expressao", // "<relacional1> inválido",
        "esperado ==  !=  <  >", //"<operador_relacional> inválido",
        "esperado expressao", // "<aritmetica> inválido",
        "esperado expressao", // "<aritmetica1> inválido",
        "esperado expressao", // "<termo> inválido",
        "esperado expressao", // "<termo1> inválido",
        "esperado expressao", // "<fator> inválido"
    };
}